### Op
import { Op } from 'sequelize'
const indexOwner = async function (req, res) {
  try {
    const pinned = await Restaurant.findAll(
      {
        attributes: { exclude: ['userId'] },
        where: { userId: req.user.id, pinnedAt:{ [Op.ne]: null }},
        include: [{
          model: RestaurantCategory,
          as: 'restaurantCategory'
        }],
        order: [['pinnedAt','ASC']]
      })
    const notPinned = await Restaurant.findAll(
      {
        attributes: { exclude: ['userId'] },
        where: { userId: req.user.id, pinnedAt:{[Op.eq]: null }},
        include: [{
          model: RestaurantCategory,
          as: 'restaurantCategory'
        }]
      })
    const restaurants = [...pinned, ...notPinned]
    res.json(restaurants)
  } catch (err) {
    res.status(500).send(err)
  }
}

### Cambiar icono
<MaterialCommunityIcons
    name={item.pinnedAt ? 'pin' : 'pin-outline'}
    color={GlobalStyles.brandSecondaryTap}
    size={24}
/>

### Transaction
import { sequelizeSession, Restaurant, Product, RestaurantCategory, ProductCategory } from '../models/models.js'

const promote = async function (req, res) {
  const t = await sequelizeSession.transaction()
  try {
    const existingPromotedRestaurant = await Restaurant.findOne({where: {userId: req.user.id, promoted: true}})
    if (existingPromotedRestaurant) {
      await Restaurant.update(
        {promoted: false},
        {where: {id: existingPromotedRestaurant.id}},
        {transaction: t}
      )
    }
    await Restaurant.update(
      {promoted: true},
      {where: {id: req.params.restaurantId}},
      {transaction: t}      
    )
    await t.commit();
    const updatedRestaurant = await Restaurant.findByPk(req.params.restaurantId)
    res.json(updatedRestaurant)
  }
  catch(err) {
    await t.rollback()
    res.status(500).send(err)
  }
}


## ImageCard
      <ImageCard
        imageUri={item.image ? { uri: process.env.API_BASE_URL + '/' + item.image } : defaultProductImage}
        title={
          <>
            <TextRegular> {item.name} </TextRegular>
            {item.promoted && <TextRegular style = {{color: 'red'}}> { item.name + ' Discount: '+restaurant.discount+'% Off'} </TextRegular>}
          </>
        }
      >
...
</ImageCard>

## Operadores sequelize
        where: { // Solution (pro)
          visibleUntil: { [Sequelize.Op.or]: [{ [Sequelize.Op.eq]: null }, { [Sequelize.Op.gt]: currentDate }] }
        },
## Validation
  // Solution
  check('visibleUntil').optional().isDate().toDate(),
  check('visibleUntil').custom((value, { req }) => {
    const currentDate = new Date()
    if (value && value < currentDate) {
      return Promise.reject(new Error('The visibility must finish after the current date.'))
    } else { return Promise.resolve() }
  }),

## Bucle for
for (const restaurante of restaurants){}
SI SE TE OLVIDA UN AWAIT PUEDE DAR 404

## fechas
// Solution
  const isAboutToBeInvisible = (deadline) => {
    console.log(deadline)
    console.log(typeof (deadline))
    const currentDate = new Date()
    const deadlineDate = new Date(deadline)

    const timeDiff = deadlineDate.getTime() - currentDate.getTime()

    const daysLeft = Math.ceil(timeDiff / (1000 * 3600 * 24))

    return daysLeft <= 7
  }

